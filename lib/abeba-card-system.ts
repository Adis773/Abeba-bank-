export interface AbebaCard {
  id: string
  userId: string
  cardNumber: string
  cardHolder: string
  expiryDate: string
  cvv: string
  balance: number
  isActive: boolean
  createdAt: Date
  lastUsed?: Date
}

export interface PaymentRequest {
  cardNumber: string
  cardHolder: string
  expiryDate: string
  cvv: string
  amount: number
  currency: string
  merchantId: string
  description: string
  returnUrl?: string
}

export interface PaymentResponse {
  success: boolean
  transactionId?: string
  error?: string
  message: string
}

export class AbebaCardSystem {
  private static instance: AbebaCardSystem
  private cards: Map<string, AbebaCard> = new Map()
  private transactions: Map<string, any> = new Map()

  static getInstance(): AbebaCardSystem {
    if (!AbebaCardSystem.instance) {
      AbebaCardSystem.instance = new AbebaCardSystem()
    }
    return AbebaCardSystem.instance
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ ABEBA-–∫–∞—Ä—Ç—ã
  generateCardNumber(): string {
    // ABEBA –∫–∞—Ä—Ç—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 4444 (–∫–∞–∫ –æ—Ç–ª–∏—á–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–∏–∑–Ω–∞–∫)
    const prefix = "4444"
    const middle = Math.floor(1000 + Math.random() * 9000).toString()
    const suffix = Math.floor(1000 + Math.random() * 9000).toString()
    const last = Math.floor(1000 + Math.random() * 9000).toString()
    
    return `${prefix} ${middle} ${suffix} ${last}`
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è CVV
  generateCVV(): string {
    return Math.floor(100 + Math.random() * 900).toString()
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è (5 –ª–µ—Ç –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã)
  generateExpiryDate(): string {
    const now = new Date()
    const expiryYear = now.getFullYear() + 5
    const expiryMonth = String(now.getMonth() + 1).padStart(2, '0')
    return `${expiryMonth}/${expiryYear.toString().slice(-2)}`
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π ABEBA-–∫–∞—Ä—Ç—ã
  createCard(userId: string, cardHolder: string): AbebaCard {
    const card: AbebaCard = {
      id: `abeba_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      userId,
      cardNumber: this.generateCardNumber(),
      cardHolder: cardHolder.toUpperCase(),
      expiryDate: this.generateExpiryDate(),
      cvv: this.generateCVV(),
      balance: 0,
      isActive: true,
      createdAt: new Date()
    }

    this.cards.set(card.cardNumber.replace(/\s/g, ''), card)
    return card
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
  validateCardNumber(cardNumber: string): boolean {
    const cleaned = cardNumber.replace(/\s/g, '')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ ABEBA –∫–∞—Ä—Ç–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 4444)
    if (!cleaned.startsWith('4444')) {
      return false
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É (16 —Ü–∏—Ñ—Ä)
    if (cleaned.length !== 16) {
      return false
    }

    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Luhn –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –¥–ª—è ABEBA –∫–∞—Ä—Ç
    return this.luhnCheck(cleaned)
  }

  // –ê–ª–≥–æ—Ä–∏—Ç–º –õ—É–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
  private luhnCheck(cardNumber: string): boolean {
    let sum = 0
    let isEven = false

    for (let i = cardNumber.length - 1; i >= 0; i--) {
      let digit = parseInt(cardNumber[i])

      if (isEven) {
        digit *= 2
        if (digit > 9) {
          digit -= 9
        }
      }

      sum += digit
      isEven = !isEven
    }

    return sum % 10 === 0
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è CVV
  validateCVV(cvv: string): boolean {
    return /^\d{3}$/.test(cvv)
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
  validateExpiryDate(expiryDate: string): boolean {
    const match = expiryDate.match(/^(\d{2})\/(\d{2})$/)
    if (!match) return false

    const month = parseInt(match[1])
    const year = parseInt(`20${match[2]}`)
    
    if (month < 1 || month > 12) return false

    const now = new Date()
    const expiry = new Date(year, month - 1)
    
    return expiry > now
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –ø–æ –Ω–æ–º–µ—Ä—É
  getCard(cardNumber: string): AbebaCard | null {
    const cleaned = cardNumber.replace(/\s/g, '')
    return this.cards.get(cleaned) || null
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞
  async processPayment(request: PaymentRequest): Promise<PaymentResponse> {
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã
      if (!this.validateCardNumber(request.cardNumber)) {
        return {
          success: false,
          error: 'INVALID_CARD_NUMBER',
          message: '–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä ABEBA-–∫–∞—Ä—Ç—ã'
        }
      }

      if (!this.validateCVV(request.cvv)) {
        return {
          success: false,
          error: 'INVALID_CVV',
          message: '–ù–µ–≤–µ—Ä–Ω—ã–π CVV –∫–æ–¥'
        }
      }

      if (!this.validateExpiryDate(request.expiryDate)) {
        return {
          success: false,
          error: 'INVALID_EXPIRY',
          message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞—Ä—Ç—ã'
        }
      }

      // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
      const card = this.getCard(request.cardNumber)
      if (!card) {
        return {
          success: false,
          error: 'CARD_NOT_FOUND',
          message: 'ABEBA-–∫–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        }
      }

      if (!card.isActive) {
        return {
          success: false,
          error: 'CARD_INACTIVE',
          message: 'ABEBA-–∫–∞—Ä—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞'
        }
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã
      if (card.cardHolder !== request.cardHolder.toUpperCase()) {
        return {
          success: false,
          error: 'INVALID_CARDHOLDER',
          message: '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –¥–µ—Ä–∂–∞—Ç–µ–ª—è –∫–∞—Ä—Ç—ã'
        }
      }

      if (card.cvv !== request.cvv) {
        return {
          success: false,
          error: 'INVALID_CVV',
          message: '–ù–µ–≤–µ—Ä–Ω—ã–π CVV –∫–æ–¥'
        }
      }

      if (card.expiryDate !== request.expiryDate) {
        return {
          success: false,
          error: 'INVALID_EXPIRY',
          message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è'
        }
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
      if (card.balance < request.amount) {
        return {
          success: false,
          error: 'INSUFFICIENT_FUNDS',
          message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ ABEBA-–∫–∞—Ä—Ç–µ'
        }
      }

      // –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const transactionId = `abeba_tx_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
      
      // –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
      card.balance -= request.amount
      card.lastUsed = new Date()

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const transaction = {
        id: transactionId,
        cardId: card.id,
        amount: request.amount,
        currency: request.currency,
        merchantId: request.merchantId,
        description: request.description,
        status: 'completed',
        createdAt: new Date()
      }

      this.transactions.set(transactionId, transaction)

      return {
        success: true,
        transactionId,
        message: '–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω —á–µ—Ä–µ–∑ ABEBA-–∫–∞—Ä—Ç—É'
      }

    } catch (error) {
      return {
        success: false,
        error: 'PROCESSING_ERROR',
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞'
      }
    }
  }

  // –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–∞—Ä—Ç—ã
  addBalance(cardNumber: string, amount: number): boolean {
    const card = this.getCard(cardNumber)
    if (card && card.isActive) {
      card.balance += amount
      return true
    }
    return false
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–∞—Ä—Ç—ã
  getBalance(cardNumber: string): number {
    const card = this.getCard(cardNumber)
    return card ? card.balance : 0
  }

  // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–∞—Ä—Ç—ã
  setCardStatus(cardNumber: string, isActive: boolean): boolean {
    const card = this.getCard(cardNumber)
    if (card) {
      card.isActive = isActive
      return true
    }
    return false
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  getTransactionHistory(cardNumber: string): any[] {
    const card = this.getCard(cardNumber)
    if (!card) return []

    return Array.from(this.transactions.values())
      .filter(tx => tx.cardId === card.id)
      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime())
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è iframe –∫–æ–¥–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
  generatePaymentIframe(merchantId: string, amount: number, currency: string = 'USD', description: string = ''): string {
    const baseUrl = 'https://abebabank.vercel.app'
    const params = new URLSearchParams({
      merchant: merchantId,
      amount: amount.toString(),
      currency,
      description
    })

    return `<iframe 
      src="${baseUrl}/pay?${params.toString()}" 
      width="400" 
      height="600" 
      frameborder="0" 
      style="border-radius: 12px; box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);">
    </iframe>`
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JavaScript –∫–æ–¥–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
  generatePaymentJS(merchantId: string): string {
    return `
// ABEBA Payment Integration
class AbebaPayment {
  constructor(merchantId) {
    this.merchantId = merchantId;
    this.baseUrl = 'https://abebabank.vercel.app';
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –æ–ø–ª–∞—Ç—ã
  createPaymentForm(amount, currency = 'USD', description = '') {
    const form = document.createElement('div');
    form.innerHTML = \`
      <div style="max-width: 400px; margin: 0 auto; padding: 20px; border: 1px solid #e5e7eb; border-radius: 12px; font-family: system-ui;">
        <h3 style="text-align: center; color: #6b46c1;">üí≥ –û–ø–ª–∞—Ç–∞ ABEBA-–∫–∞—Ä—Ç–æ–π</h3>
        <form id="abeba-payment-form">
          <div style="margin-bottom: 15px;">
            <label style="display: block; margin-bottom: 5px; font-weight: 500;">–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã</label>
            <input type="text" name="cardNumber" placeholder="4444 1111 2222 3333" 
                   style="width: 100%; padding: 10px; border: 1px solid #d1d5db; border-radius: 6px;" 
                   maxlength="19" required>
          </div>
          <div style="display: flex; gap: 15px;">
            <div style="flex: 1;">
              <label style="display: block; margin-bottom: 5px; font-weight: 500;">–°—Ä–æ–∫</label>
              <input type="text" name="expiry" placeholder="MM/YY" 
                     style="width: 100%; padding: 10px; border: 1px solid #d1d5db; border-radius: 6px;" 
                     maxlength="5" required>
            </div>
            <div style="flex: 1;">
              <label style="display: block; margin-bottom: 5px; font-weight: 500;">CVV</label>
              <input type="text" name="cvv" placeholder="123" 
                     style="width: 100%; padding: 10px; border: 1px solid #d1d5db; border-radius: 6px;" 
                     maxlength="3" required>
            </div>
          </div>
          <div style="margin: 15px 0;">
            <label style="display: block; margin-bottom: 5px; font-weight: 500;">–ò–º—è –¥–µ—Ä–∂–∞—Ç–µ–ª—è</label>
            <input type="text" name="cardHolder" placeholder="ABEBA USER" 
                   style="width: 100%; padding: 10px; border: 1px solid #d1d5db; border-radius: 6px;" required>
          </div>
          <div style="background: #f3f4f6; padding: 15px; border-radius: 6px; margin: 15px 0;">
            <div style="display: flex; justify-content: between; margin-bottom: 5px;">
              <span>–°—É–º–º–∞:</span>
              <strong>\${amount} \${currency}</strong>
            </div>
            <div style="font-size: 14px; color: #6b7280;">\${description}</div>
          </div>
          <button type="submit" 
                  style="width: 100%; background: linear-gradient(135deg, #8b5cf6, #ec4899); color: white; border: none; padding: 12px; border-radius: 6px; font-weight: 600; cursor: pointer;">
            üí≥ –û–ø–ª–∞—Ç–∏—Ç—å \${amount} \${currency}
          </button>
        </form>
      </div>
    \`;
    return form;
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞
  async processPayment(formData) {
    try {
      const response = await fetch(\`\${this.baseUrl}/api/abeba-payment\`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          ...formData,
          merchantId: this.merchantId
        })
      });
      return await response.json();
    } catch (error) {
      return { success: false, error: 'NETWORK_ERROR', message: '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏' };
    }
  }
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
// const abeba = new AbebaPayment('${merchantId}');
// const form = abeba.createPaymentForm(100, 'USD', '–ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞');
// document.body.appendChild(form);
`
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞
export const abebaCardSystem = AbebaCardSystem.getInstance()